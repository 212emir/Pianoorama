/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw2(PApplet appc, GWinData data) { //_CODE_:window3:407295:
  appc.background(230);
} //_CODE_:window3:407295:

public void compDropListSelected(GDropList source, GEvent event) { //_CODE_:compDropList:419589:
  chosenComp = compDropList.getSelectedText() + ".png";
} //_CODE_:compDropList:419589:

public void backgroundDropListSelected(GDropList source, GEvent event) { //_CODE_:backgroundDropList:222280:
  backgroundImage = backgroundDropList.getSelectedText() + "Stage.png";
  clear();
  //background.resize(500,500);
} //_CODE_:backgroundDropList:222280:

public void crazyButtonClicked(GButton source, GEvent event) { //_CODE_:crazyButton:379976:

} //_CODE_:crazyButton:379976:

public void metronomeSliderDragged(GSlider source, GEvent event) { //_CODE_:metronomeSlider:701933:
  metronomeSpeed = metronomeSlider.getValueI();
} //_CODE_:metronomeSlider:701933:

public void metronomeChecked(GCheckbox source, GEvent event) { //_CODE_:metronomeCheck:553169:
    if(metronome == false) {
      metronome = true; //turns on the metronome if checked
    }
    
    else if(metronome == true) {
      metronome = false; //turns off the metronome if unchecked
    }
} //_CODE_:metronomeCheck:553169:

public void volumeSliderDragged(GCustomSlider source, GEvent event) { //_CODE_:volumeSlider:781379:
  Pianoorama.volume = volumeSlider.getValueF();
  println(Pianoorama.volume);
} //_CODE_:volumeSlider:781379:

public void reverbKnobWetnessTurned(GKnob source, GEvent event) { //_CODE_:reverbWetnessKnob:970781:
  Pianoorama.reverbRoomSize = reverbWetnessKnob.getValueF();
} //_CODE_:reverbWetnessKnob:970781:

public void reverbRoomKnobTurned(GKnob source, GEvent event) { //_CODE_:reverbRoomKnob:625309:
  Pianoorama.reverbWetness = reverbRoomKnob.getValueF();
} //_CODE_:reverbRoomKnob:625309:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window3 = GWindow.getWindow(this, "Pianoorama GUI", 0, 0, 300, 220, JAVA2D);
  window3.noLoop();
  window3.setActionOnClose(G4P.KEEP_OPEN);
  window3.addDrawHandler(this, "win_draw2");
  compDropList = new GDropList(window3, 170, 90, 100, 120, 5, 10);
  compDropList.setItems(loadStrings("list_419589"), 0);
  compDropList.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  compDropList.addEventHandler(this, "compDropListSelected");
  backgroundDropList = new GDropList(window3, 30, 40, 90, 120, 5, 10);
  backgroundDropList.setItems(loadStrings("list_222280"), 0);
  backgroundDropList.setLocalColorScheme(GCScheme.RED_SCHEME);
  backgroundDropList.addEventHandler(this, "backgroundDropListSelected");
  crazyButton = new GButton(window3, 30, 150, 80, 30);
  crazyButton.setText("Press");
  crazyButton.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  crazyButton.addEventHandler(this, "crazyButtonClicked");
  crazyText = new GLabel(window3, 20, 128, 100, 20);
  crazyText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  crazyText.setText("Crazy Settings");
  crazyText.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  crazyText.setOpaque(false);
  compText = new GLabel(window3, 170, 70, 80, 20);
  compText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  compText.setText("Music Sheets");
  compText.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  compText.setOpaque(false);
  backgroundText = new GLabel(window3, 30, 20, 80, 20);
  backgroundText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  backgroundText.setText("Backgrounds");
  backgroundText.setLocalColorScheme(GCScheme.RED_SCHEME);
  backgroundText.setOpaque(false);
  volumeText = new GLabel(window3, 20, 70, 80, 20);
  volumeText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  volumeText.setText("Volume");
  volumeText.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  volumeText.setOpaque(false);
  metronomeSlider = new GSlider(window3, 170, 30, 100, 40, 10.0);
  metronomeSlider.setLimits(100, 35, 250);
  metronomeSlider.setNumberFormat(G4P.INTEGER, 0);
  metronomeSlider.setOpaque(false);
  metronomeSlider.addEventHandler(this, "metronomeSliderDragged");
  metronomeCheck = new GCheckbox(window3, 170, 20, 120, 20);
  metronomeCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  metronomeCheck.setText("Metronome");
  metronomeCheck.setOpaque(false);
  metronomeCheck.addEventHandler(this, "metronomeChecked");
  volumeSlider = new GCustomSlider(window3, 20, 80, 100, 40, "green_red20px");
  volumeSlider.setLimits(0.7, 0.0, 1.0);
  volumeSlider.setNumberFormat(G4P.DECIMAL, 0);
  volumeSlider.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  volumeSlider.setOpaque(false);
  volumeSlider.addEventHandler(this, "volumeSliderDragged");
  reverbWetnessKnob = new GKnob(window3, 226, 148, 45, 45, 0.8);
  reverbWetnessKnob.setTurnRange(110, 70);
  reverbWetnessKnob.setTurnMode(GKnob.CTRL_HORIZONTAL);
  reverbWetnessKnob.setSensitivity(1);
  reverbWetnessKnob.setShowArcOnly(false);
  reverbWetnessKnob.setOverArcOnly(false);
  reverbWetnessKnob.setIncludeOverBezel(false);
  reverbWetnessKnob.setShowTrack(true);
  reverbWetnessKnob.setLimits(0.5, 0.0, 1.0);
  reverbWetnessKnob.setShowTicks(true);
  reverbWetnessKnob.setOpaque(false);
  reverbWetnessKnob.addEventHandler(this, "reverbKnobWetnessTurned");
  reverbRoomKnob = new GKnob(window3, 160, 148, 45, 45, 0.8);
  reverbRoomKnob.setTurnRange(110, 70);
  reverbRoomKnob.setTurnMode(GKnob.CTRL_HORIZONTAL);
  reverbRoomKnob.setSensitivity(1);
  reverbRoomKnob.setShowArcOnly(false);
  reverbRoomKnob.setOverArcOnly(false);
  reverbRoomKnob.setIncludeOverBezel(false);
  reverbRoomKnob.setShowTrack(true);
  reverbRoomKnob.setLimits(0.5, 0.0, 1.0);
  reverbRoomKnob.setShowTicks(true);
  reverbRoomKnob.setOpaque(false);
  reverbRoomKnob.addEventHandler(this, "reverbRoomKnobTurned");
  reverbRoomText = new GLabel(window3, 149, 119, 67, 32);
  reverbRoomText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  reverbRoomText.setText("Reverb Room Size");
  reverbRoomText.setOpaque(false);
  reverbWetnessText = new GLabel(window3, 208, 119, 80, 32);
  reverbWetnessText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  reverbWetnessText.setText("Reverb Wetness");
  reverbWetnessText.setOpaque(false);
  window3.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window3;
GDropList compDropList; 
GDropList backgroundDropList; 
GButton crazyButton; 
GLabel crazyText; 
GLabel compText; 
GLabel backgroundText; 
GLabel volumeText; 
GSlider metronomeSlider; 
GCheckbox metronomeCheck; 
GCustomSlider volumeSlider; 
GKnob reverbWetnessKnob; 
GKnob reverbRoomKnob; 
GLabel reverbRoomText; 
GLabel reverbWetnessText; 
